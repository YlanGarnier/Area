// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/area/new": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "area"
                ],
                "summary": "Create an area.",
                "parameters": [
                    {
                        "description": "Fill requestr",
                        "name": "CreateAreaRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/area.CreateAreaRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "description": "one or more parameters are missing or invalid"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/area/{id}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "area"
                ],
                "summary": "Delete an area.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Area ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "description": "one or more parameters are missing or invalid"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Login as a user.",
                "parameters": [
                    {
                        "description": "Login as a user",
                        "name": "LoginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request: email or password is missing"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get my information as a user.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.MeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update my information as a user.",
                "parameters": [
                    {
                        "description": "Update my information as a user",
                        "name": "UpdateMeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateMeRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request: username, first_name and last_name is missing"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete my account as a user.",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/me/areas": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get my areas as a user.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.GetUserAreasResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/me/email": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update my email as a user.",
                "parameters": [
                    {
                        "description": "Update my email as a user",
                        "name": "UpdateMeEmailRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateMeEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request: email is missing"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/me/password": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update my password as a user .",
                "parameters": [
                    {
                        "description": "Update my password as a user",
                        "name": "UpdateMePasswordRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateMePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request: password is missing"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/me/services": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get my services as a user.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.GetUserServicesResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Connect user to a service.",
                "parameters": [
                    {
                        "description": "Connect a user to a service",
                        "name": "OauthRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.OauthRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad request: parameters are missing"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/me/services/{serviceName}": {
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Disconnect user to a service.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service Name",
                        "name": "serviceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request: parameters are missing"
                    },
                    "404": {
                        "description": "Service not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/reset_password": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Reset a user password.",
                "parameters": [
                    {
                        "description": "Reset a user password",
                        "name": "ResetUserPasswordRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.ResetUserPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request: password or token is missing"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/signup": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user.",
                "parameters": [
                    {
                        "description": "Created a user object",
                        "name": "SignUpRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "token"
                        }
                    },
                    "400": {
                        "description": "Bad request: email or password is missing or invalid"
                    },
                    "409": {
                        "description": "User already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/signup/oauth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user with oauth.",
                "parameters": [
                    {
                        "description": "Create a new user with oauth",
                        "name": "OauthRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.OauthRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created",
                        "schema": {
                            "type": "OauthResponse"
                        }
                    },
                    "302": {
                        "description": "User already exists, login",
                        "schema": {
                            "type": "OauthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request: email or code is missing"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "area.CreateAreaRequest": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "object",
                    "properties": {
                        "params": {
                            "type": "object",
                            "additionalProperties": {}
                        },
                        "route": {
                            "type": "string"
                        },
                        "service": {
                            "type": "string"
                        }
                    }
                },
                "name": {
                    "type": "string"
                },
                "reaction": {
                    "type": "object",
                    "properties": {
                        "route": {
                            "type": "string"
                        },
                        "service": {
                            "type": "string"
                        },
                        "target": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "user.GetUserAreasResponse": {
            "type": "object",
            "properties": {
                "action_service": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "reaction_service": {
                    "type": "string"
                },
                "route_action_service": {
                    "type": "string"
                },
                "route_reaction_service": {
                    "type": "string"
                }
            }
        },
        "user.GetUserServicesResponse": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "user.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "user.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "user.MeResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "kind": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "user.OauthRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "redirect_uri": {
                    "type": "string"
                }
            }
        },
        "user.ResetUserPasswordRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                }
            }
        },
        "user.SignUpRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "user.UpdateMeEmailRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "description": "Password to confirm the change",
                    "type": "string"
                }
            }
        },
        "user.UpdateMePasswordRequest": {
            "type": "object",
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "previous_password": {
                    "description": "PreviousPassword to confirm the change",
                    "type": "string"
                }
            }
        },
        "user.UpdateMeRequest": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Area API",
	Description:      "This is the Area API server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
