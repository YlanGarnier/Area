// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: discord_action_service.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DiscordServiceAction_RegisterJoinChannelWatcher_FullMethodName = "/DiscordServiceAction/RegisterJoinChannelWatcher"
)

// DiscordServiceActionClient is the client API for DiscordServiceAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscordServiceActionClient interface {
	RegisterJoinChannelWatcher(ctx context.Context, in *InviteWatcher_Request, opts ...grpc.CallOption) (*Empty, error)
}

type discordServiceActionClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscordServiceActionClient(cc grpc.ClientConnInterface) DiscordServiceActionClient {
	return &discordServiceActionClient{cc}
}

func (c *discordServiceActionClient) RegisterJoinChannelWatcher(ctx context.Context, in *InviteWatcher_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DiscordServiceAction_RegisterJoinChannelWatcher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscordServiceActionServer is the server API for DiscordServiceAction service.
// All implementations must embed UnimplementedDiscordServiceActionServer
// for forward compatibility
type DiscordServiceActionServer interface {
	RegisterJoinChannelWatcher(context.Context, *InviteWatcher_Request) (*Empty, error)
	mustEmbedUnimplementedDiscordServiceActionServer()
}

// UnimplementedDiscordServiceActionServer must be embedded to have forward compatible implementations.
type UnimplementedDiscordServiceActionServer struct {
}

func (UnimplementedDiscordServiceActionServer) RegisterJoinChannelWatcher(context.Context, *InviteWatcher_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterJoinChannelWatcher not implemented")
}
func (UnimplementedDiscordServiceActionServer) mustEmbedUnimplementedDiscordServiceActionServer() {}

// UnsafeDiscordServiceActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscordServiceActionServer will
// result in compilation errors.
type UnsafeDiscordServiceActionServer interface {
	mustEmbedUnimplementedDiscordServiceActionServer()
}

func RegisterDiscordServiceActionServer(s grpc.ServiceRegistrar, srv DiscordServiceActionServer) {
	s.RegisterService(&DiscordServiceAction_ServiceDesc, srv)
}

func _DiscordServiceAction_RegisterJoinChannelWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteWatcher_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServiceActionServer).RegisterJoinChannelWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscordServiceAction_RegisterJoinChannelWatcher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServiceActionServer).RegisterJoinChannelWatcher(ctx, req.(*InviteWatcher_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscordServiceAction_ServiceDesc is the grpc.ServiceDesc for DiscordServiceAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscordServiceAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DiscordServiceAction",
	HandlerType: (*DiscordServiceActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterJoinChannelWatcher",
			Handler:    _DiscordServiceAction_RegisterJoinChannelWatcher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discord_action_service.proto",
}
