// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: github_reaction_service.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GHServiceReaction_CreateIssue_FullMethodName     = "/GHServiceReaction/createIssue"
	GHServiceReaction_CreateRepo_FullMethodName      = "/GHServiceReaction/createRepo"
	GHServiceReaction_CreateRepoNamed_FullMethodName = "/GHServiceReaction/createRepoNamed"
	GHServiceReaction_CreateGists_FullMethodName     = "/GHServiceReaction/createGists"
	GHServiceReaction_AddTags_FullMethodName         = "/GHServiceReaction/addTags"
	GHServiceReaction_CreateBranch_FullMethodName    = "/GHServiceReaction/createBranch"
)

// GHServiceReactionClient is the client API for GHServiceReaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GHServiceReactionClient interface {
	CreateIssue(ctx context.Context, in *Format_GHIncidentReport, opts ...grpc.CallOption) (*Empty, error)
	CreateRepo(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error)
	CreateRepoNamed(ctx context.Context, in *Format_NoParam, opts ...grpc.CallOption) (*Empty, error)
	CreateGists(ctx context.Context, in *Format_ManyFiles, opts ...grpc.CallOption) (*Empty, error)
	AddTags(ctx context.Context, in *Format_Tags, opts ...grpc.CallOption) (*Empty, error)
	CreateBranch(ctx context.Context, in *Format_GHNewBranch, opts ...grpc.CallOption) (*Empty, error)
}

type gHServiceReactionClient struct {
	cc grpc.ClientConnInterface
}

func NewGHServiceReactionClient(cc grpc.ClientConnInterface) GHServiceReactionClient {
	return &gHServiceReactionClient{cc}
}

func (c *gHServiceReactionClient) CreateIssue(ctx context.Context, in *Format_GHIncidentReport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GHServiceReaction_CreateIssue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gHServiceReactionClient) CreateRepo(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GHServiceReaction_CreateRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gHServiceReactionClient) CreateRepoNamed(ctx context.Context, in *Format_NoParam, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GHServiceReaction_CreateRepoNamed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gHServiceReactionClient) CreateGists(ctx context.Context, in *Format_ManyFiles, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GHServiceReaction_CreateGists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gHServiceReactionClient) AddTags(ctx context.Context, in *Format_Tags, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GHServiceReaction_AddTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gHServiceReactionClient) CreateBranch(ctx context.Context, in *Format_GHNewBranch, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GHServiceReaction_CreateBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GHServiceReactionServer is the server API for GHServiceReaction service.
// All implementations must embed UnimplementedGHServiceReactionServer
// for forward compatibility
type GHServiceReactionServer interface {
	CreateIssue(context.Context, *Format_GHIncidentReport) (*Empty, error)
	CreateRepo(context.Context, *Format_OnlyTitle) (*Empty, error)
	CreateRepoNamed(context.Context, *Format_NoParam) (*Empty, error)
	CreateGists(context.Context, *Format_ManyFiles) (*Empty, error)
	AddTags(context.Context, *Format_Tags) (*Empty, error)
	CreateBranch(context.Context, *Format_GHNewBranch) (*Empty, error)
	mustEmbedUnimplementedGHServiceReactionServer()
}

// UnimplementedGHServiceReactionServer must be embedded to have forward compatible implementations.
type UnimplementedGHServiceReactionServer struct {
}

func (UnimplementedGHServiceReactionServer) CreateIssue(context.Context, *Format_GHIncidentReport) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssue not implemented")
}
func (UnimplementedGHServiceReactionServer) CreateRepo(context.Context, *Format_OnlyTitle) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepo not implemented")
}
func (UnimplementedGHServiceReactionServer) CreateRepoNamed(context.Context, *Format_NoParam) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepoNamed not implemented")
}
func (UnimplementedGHServiceReactionServer) CreateGists(context.Context, *Format_ManyFiles) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGists not implemented")
}
func (UnimplementedGHServiceReactionServer) AddTags(context.Context, *Format_Tags) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTags not implemented")
}
func (UnimplementedGHServiceReactionServer) CreateBranch(context.Context, *Format_GHNewBranch) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (UnimplementedGHServiceReactionServer) mustEmbedUnimplementedGHServiceReactionServer() {}

// UnsafeGHServiceReactionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GHServiceReactionServer will
// result in compilation errors.
type UnsafeGHServiceReactionServer interface {
	mustEmbedUnimplementedGHServiceReactionServer()
}

func RegisterGHServiceReactionServer(s grpc.ServiceRegistrar, srv GHServiceReactionServer) {
	s.RegisterService(&GHServiceReaction_ServiceDesc, srv)
}

func _GHServiceReaction_CreateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_GHIncidentReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GHServiceReactionServer).CreateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GHServiceReaction_CreateIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GHServiceReactionServer).CreateIssue(ctx, req.(*Format_GHIncidentReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _GHServiceReaction_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_OnlyTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GHServiceReactionServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GHServiceReaction_CreateRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GHServiceReactionServer).CreateRepo(ctx, req.(*Format_OnlyTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _GHServiceReaction_CreateRepoNamed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GHServiceReactionServer).CreateRepoNamed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GHServiceReaction_CreateRepoNamed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GHServiceReactionServer).CreateRepoNamed(ctx, req.(*Format_NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GHServiceReaction_CreateGists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_ManyFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GHServiceReactionServer).CreateGists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GHServiceReaction_CreateGists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GHServiceReactionServer).CreateGists(ctx, req.(*Format_ManyFiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _GHServiceReaction_AddTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_Tags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GHServiceReactionServer).AddTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GHServiceReaction_AddTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GHServiceReactionServer).AddTags(ctx, req.(*Format_Tags))
	}
	return interceptor(ctx, in, info, handler)
}

func _GHServiceReaction_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_GHNewBranch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GHServiceReactionServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GHServiceReaction_CreateBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GHServiceReactionServer).CreateBranch(ctx, req.(*Format_GHNewBranch))
	}
	return interceptor(ctx, in, info, handler)
}

// GHServiceReaction_ServiceDesc is the grpc.ServiceDesc for GHServiceReaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GHServiceReaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GHServiceReaction",
	HandlerType: (*GHServiceReactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createIssue",
			Handler:    _GHServiceReaction_CreateIssue_Handler,
		},
		{
			MethodName: "createRepo",
			Handler:    _GHServiceReaction_CreateRepo_Handler,
		},
		{
			MethodName: "createRepoNamed",
			Handler:    _GHServiceReaction_CreateRepoNamed_Handler,
		},
		{
			MethodName: "createGists",
			Handler:    _GHServiceReaction_CreateGists_Handler,
		},
		{
			MethodName: "addTags",
			Handler:    _GHServiceReaction_AddTags_Handler,
		},
		{
			MethodName: "createBranch",
			Handler:    _GHServiceReaction_CreateBranch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github_reaction_service.proto",
}
