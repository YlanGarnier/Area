// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: gmail_action_service.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GmailServiceAction_RegisterWatcher_FullMethodName                    = "/GmailServiceAction/RegisterWatcher"
	GmailServiceAction_RegisterNewEmail_FullMethodName                   = "/GmailServiceAction/RegisterNewEmail"
	GmailServiceAction_RegisterNewEmailWithSender_FullMethodName         = "/GmailServiceAction/RegisterNewEmailWithSender"
	GmailServiceAction_RegisterNewEmailAtDate_FullMethodName             = "/GmailServiceAction/RegisterNewEmailAtDate"
	GmailServiceAction_RegisterNewEmailAtDateWithSender_FullMethodName   = "/GmailServiceAction/RegisterNewEmailAtDateWithSender"
	GmailServiceAction_RegisterNewDraft_FullMethodName                   = "/GmailServiceAction/RegisterNewDraft"
	GmailServiceAction_RegisterNewDraftAtDate_FullMethodName             = "/GmailServiceAction/RegisterNewDraftAtDate"
	GmailServiceAction_RegisterNewDraftWithReceiver_FullMethodName       = "/GmailServiceAction/RegisterNewDraftWithReceiver"
	GmailServiceAction_RegisterNewDraftAtDateWithReceiver_FullMethodName = "/GmailServiceAction/RegisterNewDraftAtDateWithReceiver"
	GmailServiceAction_RegisterNewLabel_FullMethodName                   = "/GmailServiceAction/RegisterNewLabel"
	GmailServiceAction_RegisterNewLabelWithName_FullMethodName           = "/GmailServiceAction/RegisterNewLabelWithName"
	GmailServiceAction_RegisterNewEmailInLabel_FullMethodName            = "/GmailServiceAction/RegisterNewEmailInLabel"
)

// GmailServiceActionClient is the client API for GmailServiceAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GmailServiceActionClient interface {
	RegisterWatcher(ctx context.Context, in *WaitMail_Request, opts ...grpc.CallOption) (*Empty, error)
	RegisterNewEmail(ctx context.Context, in *NewEmail_Request, opts ...grpc.CallOption) (*Empty, error)
	RegisterNewEmailWithSender(ctx context.Context, in *NewEmailWithSender_Request, opts ...grpc.CallOption) (*Empty, error)
	RegisterNewEmailAtDate(ctx context.Context, in *NewEmailAtDate_Request, opts ...grpc.CallOption) (*Empty, error)
	RegisterNewEmailAtDateWithSender(ctx context.Context, in *NewEmailAtDateWithSender_Request, opts ...grpc.CallOption) (*Empty, error)
	RegisterNewDraft(ctx context.Context, in *NewDraft_Request, opts ...grpc.CallOption) (*Empty, error)
	RegisterNewDraftAtDate(ctx context.Context, in *NewDraftAtDate_Request, opts ...grpc.CallOption) (*Empty, error)
	RegisterNewDraftWithReceiver(ctx context.Context, in *NewDraftWithReceiver_Request, opts ...grpc.CallOption) (*Empty, error)
	RegisterNewDraftAtDateWithReceiver(ctx context.Context, in *NewDraftAtDateWithReceiver_Request, opts ...grpc.CallOption) (*Empty, error)
	RegisterNewLabel(ctx context.Context, in *NewLabel_Request, opts ...grpc.CallOption) (*Empty, error)
	RegisterNewLabelWithName(ctx context.Context, in *NewLabelWithName_Request, opts ...grpc.CallOption) (*Empty, error)
	RegisterNewEmailInLabel(ctx context.Context, in *NewEmailInLabel_Request, opts ...grpc.CallOption) (*Empty, error)
}

type gmailServiceActionClient struct {
	cc grpc.ClientConnInterface
}

func NewGmailServiceActionClient(cc grpc.ClientConnInterface) GmailServiceActionClient {
	return &gmailServiceActionClient{cc}
}

func (c *gmailServiceActionClient) RegisterWatcher(ctx context.Context, in *WaitMail_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GmailServiceAction_RegisterWatcher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmailServiceActionClient) RegisterNewEmail(ctx context.Context, in *NewEmail_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GmailServiceAction_RegisterNewEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmailServiceActionClient) RegisterNewEmailWithSender(ctx context.Context, in *NewEmailWithSender_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GmailServiceAction_RegisterNewEmailWithSender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmailServiceActionClient) RegisterNewEmailAtDate(ctx context.Context, in *NewEmailAtDate_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GmailServiceAction_RegisterNewEmailAtDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmailServiceActionClient) RegisterNewEmailAtDateWithSender(ctx context.Context, in *NewEmailAtDateWithSender_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GmailServiceAction_RegisterNewEmailAtDateWithSender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmailServiceActionClient) RegisterNewDraft(ctx context.Context, in *NewDraft_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GmailServiceAction_RegisterNewDraft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmailServiceActionClient) RegisterNewDraftAtDate(ctx context.Context, in *NewDraftAtDate_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GmailServiceAction_RegisterNewDraftAtDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmailServiceActionClient) RegisterNewDraftWithReceiver(ctx context.Context, in *NewDraftWithReceiver_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GmailServiceAction_RegisterNewDraftWithReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmailServiceActionClient) RegisterNewDraftAtDateWithReceiver(ctx context.Context, in *NewDraftAtDateWithReceiver_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GmailServiceAction_RegisterNewDraftAtDateWithReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmailServiceActionClient) RegisterNewLabel(ctx context.Context, in *NewLabel_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GmailServiceAction_RegisterNewLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmailServiceActionClient) RegisterNewLabelWithName(ctx context.Context, in *NewLabelWithName_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GmailServiceAction_RegisterNewLabelWithName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmailServiceActionClient) RegisterNewEmailInLabel(ctx context.Context, in *NewEmailInLabel_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GmailServiceAction_RegisterNewEmailInLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GmailServiceActionServer is the server API for GmailServiceAction service.
// All implementations must embed UnimplementedGmailServiceActionServer
// for forward compatibility
type GmailServiceActionServer interface {
	RegisterWatcher(context.Context, *WaitMail_Request) (*Empty, error)
	RegisterNewEmail(context.Context, *NewEmail_Request) (*Empty, error)
	RegisterNewEmailWithSender(context.Context, *NewEmailWithSender_Request) (*Empty, error)
	RegisterNewEmailAtDate(context.Context, *NewEmailAtDate_Request) (*Empty, error)
	RegisterNewEmailAtDateWithSender(context.Context, *NewEmailAtDateWithSender_Request) (*Empty, error)
	RegisterNewDraft(context.Context, *NewDraft_Request) (*Empty, error)
	RegisterNewDraftAtDate(context.Context, *NewDraftAtDate_Request) (*Empty, error)
	RegisterNewDraftWithReceiver(context.Context, *NewDraftWithReceiver_Request) (*Empty, error)
	RegisterNewDraftAtDateWithReceiver(context.Context, *NewDraftAtDateWithReceiver_Request) (*Empty, error)
	RegisterNewLabel(context.Context, *NewLabel_Request) (*Empty, error)
	RegisterNewLabelWithName(context.Context, *NewLabelWithName_Request) (*Empty, error)
	RegisterNewEmailInLabel(context.Context, *NewEmailInLabel_Request) (*Empty, error)
	mustEmbedUnimplementedGmailServiceActionServer()
}

// UnimplementedGmailServiceActionServer must be embedded to have forward compatible implementations.
type UnimplementedGmailServiceActionServer struct {
}

func (UnimplementedGmailServiceActionServer) RegisterWatcher(context.Context, *WaitMail_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWatcher not implemented")
}
func (UnimplementedGmailServiceActionServer) RegisterNewEmail(context.Context, *NewEmail_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewEmail not implemented")
}
func (UnimplementedGmailServiceActionServer) RegisterNewEmailWithSender(context.Context, *NewEmailWithSender_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewEmailWithSender not implemented")
}
func (UnimplementedGmailServiceActionServer) RegisterNewEmailAtDate(context.Context, *NewEmailAtDate_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewEmailAtDate not implemented")
}
func (UnimplementedGmailServiceActionServer) RegisterNewEmailAtDateWithSender(context.Context, *NewEmailAtDateWithSender_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewEmailAtDateWithSender not implemented")
}
func (UnimplementedGmailServiceActionServer) RegisterNewDraft(context.Context, *NewDraft_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewDraft not implemented")
}
func (UnimplementedGmailServiceActionServer) RegisterNewDraftAtDate(context.Context, *NewDraftAtDate_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewDraftAtDate not implemented")
}
func (UnimplementedGmailServiceActionServer) RegisterNewDraftWithReceiver(context.Context, *NewDraftWithReceiver_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewDraftWithReceiver not implemented")
}
func (UnimplementedGmailServiceActionServer) RegisterNewDraftAtDateWithReceiver(context.Context, *NewDraftAtDateWithReceiver_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewDraftAtDateWithReceiver not implemented")
}
func (UnimplementedGmailServiceActionServer) RegisterNewLabel(context.Context, *NewLabel_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewLabel not implemented")
}
func (UnimplementedGmailServiceActionServer) RegisterNewLabelWithName(context.Context, *NewLabelWithName_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewLabelWithName not implemented")
}
func (UnimplementedGmailServiceActionServer) RegisterNewEmailInLabel(context.Context, *NewEmailInLabel_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewEmailInLabel not implemented")
}
func (UnimplementedGmailServiceActionServer) mustEmbedUnimplementedGmailServiceActionServer() {}

// UnsafeGmailServiceActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GmailServiceActionServer will
// result in compilation errors.
type UnsafeGmailServiceActionServer interface {
	mustEmbedUnimplementedGmailServiceActionServer()
}

func RegisterGmailServiceActionServer(s grpc.ServiceRegistrar, srv GmailServiceActionServer) {
	s.RegisterService(&GmailServiceAction_ServiceDesc, srv)
}

func _GmailServiceAction_RegisterWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitMail_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailServiceActionServer).RegisterWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmailServiceAction_RegisterWatcher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailServiceActionServer).RegisterWatcher(ctx, req.(*WaitMail_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmailServiceAction_RegisterNewEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEmail_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailServiceActionServer).RegisterNewEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmailServiceAction_RegisterNewEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailServiceActionServer).RegisterNewEmail(ctx, req.(*NewEmail_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmailServiceAction_RegisterNewEmailWithSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEmailWithSender_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailServiceActionServer).RegisterNewEmailWithSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmailServiceAction_RegisterNewEmailWithSender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailServiceActionServer).RegisterNewEmailWithSender(ctx, req.(*NewEmailWithSender_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmailServiceAction_RegisterNewEmailAtDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEmailAtDate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailServiceActionServer).RegisterNewEmailAtDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmailServiceAction_RegisterNewEmailAtDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailServiceActionServer).RegisterNewEmailAtDate(ctx, req.(*NewEmailAtDate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmailServiceAction_RegisterNewEmailAtDateWithSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEmailAtDateWithSender_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailServiceActionServer).RegisterNewEmailAtDateWithSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmailServiceAction_RegisterNewEmailAtDateWithSender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailServiceActionServer).RegisterNewEmailAtDateWithSender(ctx, req.(*NewEmailAtDateWithSender_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmailServiceAction_RegisterNewDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDraft_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailServiceActionServer).RegisterNewDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmailServiceAction_RegisterNewDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailServiceActionServer).RegisterNewDraft(ctx, req.(*NewDraft_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmailServiceAction_RegisterNewDraftAtDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDraftAtDate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailServiceActionServer).RegisterNewDraftAtDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmailServiceAction_RegisterNewDraftAtDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailServiceActionServer).RegisterNewDraftAtDate(ctx, req.(*NewDraftAtDate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmailServiceAction_RegisterNewDraftWithReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDraftWithReceiver_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailServiceActionServer).RegisterNewDraftWithReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmailServiceAction_RegisterNewDraftWithReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailServiceActionServer).RegisterNewDraftWithReceiver(ctx, req.(*NewDraftWithReceiver_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmailServiceAction_RegisterNewDraftAtDateWithReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDraftAtDateWithReceiver_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailServiceActionServer).RegisterNewDraftAtDateWithReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmailServiceAction_RegisterNewDraftAtDateWithReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailServiceActionServer).RegisterNewDraftAtDateWithReceiver(ctx, req.(*NewDraftAtDateWithReceiver_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmailServiceAction_RegisterNewLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLabel_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailServiceActionServer).RegisterNewLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmailServiceAction_RegisterNewLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailServiceActionServer).RegisterNewLabel(ctx, req.(*NewLabel_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmailServiceAction_RegisterNewLabelWithName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLabelWithName_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailServiceActionServer).RegisterNewLabelWithName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmailServiceAction_RegisterNewLabelWithName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailServiceActionServer).RegisterNewLabelWithName(ctx, req.(*NewLabelWithName_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmailServiceAction_RegisterNewEmailInLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEmailInLabel_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailServiceActionServer).RegisterNewEmailInLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmailServiceAction_RegisterNewEmailInLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailServiceActionServer).RegisterNewEmailInLabel(ctx, req.(*NewEmailInLabel_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GmailServiceAction_ServiceDesc is the grpc.ServiceDesc for GmailServiceAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GmailServiceAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GmailServiceAction",
	HandlerType: (*GmailServiceActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWatcher",
			Handler:    _GmailServiceAction_RegisterWatcher_Handler,
		},
		{
			MethodName: "RegisterNewEmail",
			Handler:    _GmailServiceAction_RegisterNewEmail_Handler,
		},
		{
			MethodName: "RegisterNewEmailWithSender",
			Handler:    _GmailServiceAction_RegisterNewEmailWithSender_Handler,
		},
		{
			MethodName: "RegisterNewEmailAtDate",
			Handler:    _GmailServiceAction_RegisterNewEmailAtDate_Handler,
		},
		{
			MethodName: "RegisterNewEmailAtDateWithSender",
			Handler:    _GmailServiceAction_RegisterNewEmailAtDateWithSender_Handler,
		},
		{
			MethodName: "RegisterNewDraft",
			Handler:    _GmailServiceAction_RegisterNewDraft_Handler,
		},
		{
			MethodName: "RegisterNewDraftAtDate",
			Handler:    _GmailServiceAction_RegisterNewDraftAtDate_Handler,
		},
		{
			MethodName: "RegisterNewDraftWithReceiver",
			Handler:    _GmailServiceAction_RegisterNewDraftWithReceiver_Handler,
		},
		{
			MethodName: "RegisterNewDraftAtDateWithReceiver",
			Handler:    _GmailServiceAction_RegisterNewDraftAtDateWithReceiver_Handler,
		},
		{
			MethodName: "RegisterNewLabel",
			Handler:    _GmailServiceAction_RegisterNewLabel_Handler,
		},
		{
			MethodName: "RegisterNewLabelWithName",
			Handler:    _GmailServiceAction_RegisterNewLabelWithName_Handler,
		},
		{
			MethodName: "RegisterNewEmailInLabel",
			Handler:    _GmailServiceAction_RegisterNewEmailInLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gmail_action_service.proto",
}
