// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: gmail_reaction_service.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GmailServiceReaction_SendMail_FullMethodName = "/GmailServiceReaction/SendMail"
)

// GmailServiceReactionClient is the client API for GmailServiceReaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GmailServiceReactionClient interface {
	SendMail(ctx context.Context, in *Format_MessageAndDestinary, opts ...grpc.CallOption) (*Empty, error)
}

type gmailServiceReactionClient struct {
	cc grpc.ClientConnInterface
}

func NewGmailServiceReactionClient(cc grpc.ClientConnInterface) GmailServiceReactionClient {
	return &gmailServiceReactionClient{cc}
}

func (c *gmailServiceReactionClient) SendMail(ctx context.Context, in *Format_MessageAndDestinary, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, GmailServiceReaction_SendMail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GmailServiceReactionServer is the server API for GmailServiceReaction service.
// All implementations must embed UnimplementedGmailServiceReactionServer
// for forward compatibility
type GmailServiceReactionServer interface {
	SendMail(context.Context, *Format_MessageAndDestinary) (*Empty, error)
	mustEmbedUnimplementedGmailServiceReactionServer()
}

// UnimplementedGmailServiceReactionServer must be embedded to have forward compatible implementations.
type UnimplementedGmailServiceReactionServer struct {
}

func (UnimplementedGmailServiceReactionServer) SendMail(context.Context, *Format_MessageAndDestinary) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}
func (UnimplementedGmailServiceReactionServer) mustEmbedUnimplementedGmailServiceReactionServer() {}

// UnsafeGmailServiceReactionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GmailServiceReactionServer will
// result in compilation errors.
type UnsafeGmailServiceReactionServer interface {
	mustEmbedUnimplementedGmailServiceReactionServer()
}

func RegisterGmailServiceReactionServer(s grpc.ServiceRegistrar, srv GmailServiceReactionServer) {
	s.RegisterService(&GmailServiceReaction_ServiceDesc, srv)
}

func _GmailServiceReaction_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_MessageAndDestinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmailServiceReactionServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmailServiceReaction_SendMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmailServiceReactionServer).SendMail(ctx, req.(*Format_MessageAndDestinary))
	}
	return interceptor(ctx, in, info, handler)
}

// GmailServiceReaction_ServiceDesc is the grpc.ServiceDesc for GmailServiceReaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GmailServiceReaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GmailServiceReaction",
	HandlerType: (*GmailServiceReactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMail",
			Handler:    _GmailServiceReaction_SendMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gmail_reaction_service.proto",
}
