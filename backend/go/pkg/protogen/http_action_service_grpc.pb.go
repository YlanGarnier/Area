// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: http_action_service.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HTTPServiceAction_RegisterWatcher_FullMethodName = "/http_action.HTTPServiceAction/RegisterWatcher"
)

// HTTPServiceActionClient is the client API for HTTPServiceAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HTTPServiceActionClient interface {
	RegisterWatcher(ctx context.Context, in *RegisterWatcher_Request, opts ...grpc.CallOption) (*Empty, error)
}

type hTTPServiceActionClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPServiceActionClient(cc grpc.ClientConnInterface) HTTPServiceActionClient {
	return &hTTPServiceActionClient{cc}
}

func (c *hTTPServiceActionClient) RegisterWatcher(ctx context.Context, in *RegisterWatcher_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, HTTPServiceAction_RegisterWatcher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPServiceActionServer is the server API for HTTPServiceAction service.
// All implementations must embed UnimplementedHTTPServiceActionServer
// for forward compatibility
type HTTPServiceActionServer interface {
	RegisterWatcher(context.Context, *RegisterWatcher_Request) (*Empty, error)
	mustEmbedUnimplementedHTTPServiceActionServer()
}

// UnimplementedHTTPServiceActionServer must be embedded to have forward compatible implementations.
type UnimplementedHTTPServiceActionServer struct {
}

func (UnimplementedHTTPServiceActionServer) RegisterWatcher(context.Context, *RegisterWatcher_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWatcher not implemented")
}
func (UnimplementedHTTPServiceActionServer) mustEmbedUnimplementedHTTPServiceActionServer() {}

// UnsafeHTTPServiceActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPServiceActionServer will
// result in compilation errors.
type UnsafeHTTPServiceActionServer interface {
	mustEmbedUnimplementedHTTPServiceActionServer()
}

func RegisterHTTPServiceActionServer(s grpc.ServiceRegistrar, srv HTTPServiceActionServer) {
	s.RegisterService(&HTTPServiceAction_ServiceDesc, srv)
}

func _HTTPServiceAction_RegisterWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWatcher_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPServiceActionServer).RegisterWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HTTPServiceAction_RegisterWatcher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPServiceActionServer).RegisterWatcher(ctx, req.(*RegisterWatcher_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// HTTPServiceAction_ServiceDesc is the grpc.ServiceDesc for HTTPServiceAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HTTPServiceAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "http_action.HTTPServiceAction",
	HandlerType: (*HTTPServiceActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWatcher",
			Handler:    _HTTPServiceAction_RegisterWatcher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http_action_service.proto",
}
