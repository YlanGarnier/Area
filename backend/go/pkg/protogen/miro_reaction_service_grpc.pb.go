// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: miro_reaction_service.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MiroServiceReaction_CreateBoard_FullMethodName      = "/MiroServiceReaction/createBoard"
	MiroServiceReaction_CreateTags_FullMethodName       = "/MiroServiceReaction/createTags"
	MiroServiceReaction_CreateStickyCard_FullMethodName = "/MiroServiceReaction/createStickyCard"
	MiroServiceReaction_CreateCardItem_FullMethodName   = "/MiroServiceReaction/createCardItem"
)

// MiroServiceReactionClient is the client API for MiroServiceReaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiroServiceReactionClient interface {
	CreateBoard(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error)
	CreateTags(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error)
	CreateStickyCard(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error)
	CreateCardItem(ctx context.Context, in *Format_GHIncidentReport, opts ...grpc.CallOption) (*Empty, error)
}

type miroServiceReactionClient struct {
	cc grpc.ClientConnInterface
}

func NewMiroServiceReactionClient(cc grpc.ClientConnInterface) MiroServiceReactionClient {
	return &miroServiceReactionClient{cc}
}

func (c *miroServiceReactionClient) CreateBoard(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MiroServiceReaction_CreateBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miroServiceReactionClient) CreateTags(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MiroServiceReaction_CreateTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miroServiceReactionClient) CreateStickyCard(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MiroServiceReaction_CreateStickyCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miroServiceReactionClient) CreateCardItem(ctx context.Context, in *Format_GHIncidentReport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MiroServiceReaction_CreateCardItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiroServiceReactionServer is the server API for MiroServiceReaction service.
// All implementations must embed UnimplementedMiroServiceReactionServer
// for forward compatibility
type MiroServiceReactionServer interface {
	CreateBoard(context.Context, *Format_OnlyTitle) (*Empty, error)
	CreateTags(context.Context, *Format_OnlyTitle) (*Empty, error)
	CreateStickyCard(context.Context, *Format_OnlyTitle) (*Empty, error)
	CreateCardItem(context.Context, *Format_GHIncidentReport) (*Empty, error)
	mustEmbedUnimplementedMiroServiceReactionServer()
}

// UnimplementedMiroServiceReactionServer must be embedded to have forward compatible implementations.
type UnimplementedMiroServiceReactionServer struct {
}

func (UnimplementedMiroServiceReactionServer) CreateBoard(context.Context, *Format_OnlyTitle) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoard not implemented")
}
func (UnimplementedMiroServiceReactionServer) CreateTags(context.Context, *Format_OnlyTitle) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTags not implemented")
}
func (UnimplementedMiroServiceReactionServer) CreateStickyCard(context.Context, *Format_OnlyTitle) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStickyCard not implemented")
}
func (UnimplementedMiroServiceReactionServer) CreateCardItem(context.Context, *Format_GHIncidentReport) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCardItem not implemented")
}
func (UnimplementedMiroServiceReactionServer) mustEmbedUnimplementedMiroServiceReactionServer() {}

// UnsafeMiroServiceReactionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiroServiceReactionServer will
// result in compilation errors.
type UnsafeMiroServiceReactionServer interface {
	mustEmbedUnimplementedMiroServiceReactionServer()
}

func RegisterMiroServiceReactionServer(s grpc.ServiceRegistrar, srv MiroServiceReactionServer) {
	s.RegisterService(&MiroServiceReaction_ServiceDesc, srv)
}

func _MiroServiceReaction_CreateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_OnlyTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiroServiceReactionServer).CreateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiroServiceReaction_CreateBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiroServiceReactionServer).CreateBoard(ctx, req.(*Format_OnlyTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiroServiceReaction_CreateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_OnlyTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiroServiceReactionServer).CreateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiroServiceReaction_CreateTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiroServiceReactionServer).CreateTags(ctx, req.(*Format_OnlyTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiroServiceReaction_CreateStickyCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_OnlyTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiroServiceReactionServer).CreateStickyCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiroServiceReaction_CreateStickyCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiroServiceReactionServer).CreateStickyCard(ctx, req.(*Format_OnlyTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiroServiceReaction_CreateCardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_GHIncidentReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiroServiceReactionServer).CreateCardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiroServiceReaction_CreateCardItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiroServiceReactionServer).CreateCardItem(ctx, req.(*Format_GHIncidentReport))
	}
	return interceptor(ctx, in, info, handler)
}

// MiroServiceReaction_ServiceDesc is the grpc.ServiceDesc for MiroServiceReaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiroServiceReaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MiroServiceReaction",
	HandlerType: (*MiroServiceReactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createBoard",
			Handler:    _MiroServiceReaction_CreateBoard_Handler,
		},
		{
			MethodName: "createTags",
			Handler:    _MiroServiceReaction_CreateTags_Handler,
		},
		{
			MethodName: "createStickyCard",
			Handler:    _MiroServiceReaction_CreateStickyCard_Handler,
		},
		{
			MethodName: "createCardItem",
			Handler:    _MiroServiceReaction_CreateCardItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "miro_reaction_service.proto",
}
