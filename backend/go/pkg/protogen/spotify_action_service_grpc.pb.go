// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: spotify_action_service.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SpotifyServiceAction_WatchArtist_FullMethodName = "/SpotifyServiceAction/WatchArtist"
	SpotifyServiceAction_WatchSong_FullMethodName   = "/SpotifyServiceAction/WatchSong"
)

// SpotifyServiceActionClient is the client API for SpotifyServiceAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpotifyServiceActionClient interface {
	WatchArtist(ctx context.Context, in *Watcher_Request, opts ...grpc.CallOption) (*Empty, error)
	WatchSong(ctx context.Context, in *Watcher_Request, opts ...grpc.CallOption) (*Empty, error)
}

type spotifyServiceActionClient struct {
	cc grpc.ClientConnInterface
}

func NewSpotifyServiceActionClient(cc grpc.ClientConnInterface) SpotifyServiceActionClient {
	return &spotifyServiceActionClient{cc}
}

func (c *spotifyServiceActionClient) WatchArtist(ctx context.Context, in *Watcher_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SpotifyServiceAction_WatchArtist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotifyServiceActionClient) WatchSong(ctx context.Context, in *Watcher_Request, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SpotifyServiceAction_WatchSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpotifyServiceActionServer is the server API for SpotifyServiceAction service.
// All implementations must embed UnimplementedSpotifyServiceActionServer
// for forward compatibility
type SpotifyServiceActionServer interface {
	WatchArtist(context.Context, *Watcher_Request) (*Empty, error)
	WatchSong(context.Context, *Watcher_Request) (*Empty, error)
	mustEmbedUnimplementedSpotifyServiceActionServer()
}

// UnimplementedSpotifyServiceActionServer must be embedded to have forward compatible implementations.
type UnimplementedSpotifyServiceActionServer struct {
}

func (UnimplementedSpotifyServiceActionServer) WatchArtist(context.Context, *Watcher_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchArtist not implemented")
}
func (UnimplementedSpotifyServiceActionServer) WatchSong(context.Context, *Watcher_Request) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchSong not implemented")
}
func (UnimplementedSpotifyServiceActionServer) mustEmbedUnimplementedSpotifyServiceActionServer() {}

// UnsafeSpotifyServiceActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpotifyServiceActionServer will
// result in compilation errors.
type UnsafeSpotifyServiceActionServer interface {
	mustEmbedUnimplementedSpotifyServiceActionServer()
}

func RegisterSpotifyServiceActionServer(s grpc.ServiceRegistrar, srv SpotifyServiceActionServer) {
	s.RegisterService(&SpotifyServiceAction_ServiceDesc, srv)
}

func _SpotifyServiceAction_WatchArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Watcher_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotifyServiceActionServer).WatchArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpotifyServiceAction_WatchArtist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotifyServiceActionServer).WatchArtist(ctx, req.(*Watcher_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotifyServiceAction_WatchSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Watcher_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotifyServiceActionServer).WatchSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpotifyServiceAction_WatchSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotifyServiceActionServer).WatchSong(ctx, req.(*Watcher_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SpotifyServiceAction_ServiceDesc is the grpc.ServiceDesc for SpotifyServiceAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpotifyServiceAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SpotifyServiceAction",
	HandlerType: (*SpotifyServiceActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WatchArtist",
			Handler:    _SpotifyServiceAction_WatchArtist_Handler,
		},
		{
			MethodName: "WatchSong",
			Handler:    _SpotifyServiceAction_WatchSong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spotify_action_service.proto",
}
