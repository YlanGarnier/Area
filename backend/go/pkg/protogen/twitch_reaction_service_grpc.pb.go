// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: twitch_reaction_service.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TwitchServiceReaction_SendDefaultMessage_FullMethodName = "/TwitchServiceReaction/sendDefaultMessage"
	TwitchServiceReaction_SendMessage_FullMethodName        = "/TwitchServiceReaction/sendMessage"
)

// TwitchServiceReactionClient is the client API for TwitchServiceReaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitchServiceReactionClient interface {
	SendDefaultMessage(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error)
	SendMessage(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error)
}

type twitchServiceReactionClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitchServiceReactionClient(cc grpc.ClientConnInterface) TwitchServiceReactionClient {
	return &twitchServiceReactionClient{cc}
}

func (c *twitchServiceReactionClient) SendDefaultMessage(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TwitchServiceReaction_SendDefaultMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitchServiceReactionClient) SendMessage(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TwitchServiceReaction_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitchServiceReactionServer is the server API for TwitchServiceReaction service.
// All implementations must embed UnimplementedTwitchServiceReactionServer
// for forward compatibility
type TwitchServiceReactionServer interface {
	SendDefaultMessage(context.Context, *Format_OnlyTitle) (*Empty, error)
	SendMessage(context.Context, *Format_OnlyTitle) (*Empty, error)
	mustEmbedUnimplementedTwitchServiceReactionServer()
}

// UnimplementedTwitchServiceReactionServer must be embedded to have forward compatible implementations.
type UnimplementedTwitchServiceReactionServer struct {
}

func (UnimplementedTwitchServiceReactionServer) SendDefaultMessage(context.Context, *Format_OnlyTitle) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDefaultMessage not implemented")
}
func (UnimplementedTwitchServiceReactionServer) SendMessage(context.Context, *Format_OnlyTitle) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedTwitchServiceReactionServer) mustEmbedUnimplementedTwitchServiceReactionServer() {}

// UnsafeTwitchServiceReactionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitchServiceReactionServer will
// result in compilation errors.
type UnsafeTwitchServiceReactionServer interface {
	mustEmbedUnimplementedTwitchServiceReactionServer()
}

func RegisterTwitchServiceReactionServer(s grpc.ServiceRegistrar, srv TwitchServiceReactionServer) {
	s.RegisterService(&TwitchServiceReaction_ServiceDesc, srv)
}

func _TwitchServiceReaction_SendDefaultMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_OnlyTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitchServiceReactionServer).SendDefaultMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitchServiceReaction_SendDefaultMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitchServiceReactionServer).SendDefaultMessage(ctx, req.(*Format_OnlyTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitchServiceReaction_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_OnlyTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitchServiceReactionServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitchServiceReaction_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitchServiceReactionServer).SendMessage(ctx, req.(*Format_OnlyTitle))
	}
	return interceptor(ctx, in, info, handler)
}

// TwitchServiceReaction_ServiceDesc is the grpc.ServiceDesc for TwitchServiceReaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwitchServiceReaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TwitchServiceReaction",
	HandlerType: (*TwitchServiceReactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendDefaultMessage",
			Handler:    _TwitchServiceReaction_SendDefaultMessage_Handler,
		},
		{
			MethodName: "sendMessage",
			Handler:    _TwitchServiceReaction_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twitch_reaction_service.proto",
}
