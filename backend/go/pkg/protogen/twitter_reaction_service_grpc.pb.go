// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: twitter_reaction_service.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TwitterServiceReaction_PostTweet_FullMethodName                    = "/TwitterServiceReaction/postTweet"
	TwitterServiceReaction_PostTweetWithContent_FullMethodName         = "/TwitterServiceReaction/postTweetWithContent"
	TwitterServiceReaction_PostTweetWithPoll_FullMethodName            = "/TwitterServiceReaction/postTweetWithPoll"
	TwitterServiceReaction_PostTweetWithContentWithPoll_FullMethodName = "/TwitterServiceReaction/postTweetWithContentWithPoll"
)

// TwitterServiceReactionClient is the client API for TwitterServiceReaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitterServiceReactionClient interface {
	PostTweet(ctx context.Context, in *Format_NoParam, opts ...grpc.CallOption) (*Empty, error)
	PostTweetWithContent(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error)
	PostTweetWithPoll(ctx context.Context, in *Format_NoParam, opts ...grpc.CallOption) (*Empty, error)
	PostTweetWithContentWithPoll(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error)
}

type twitterServiceReactionClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitterServiceReactionClient(cc grpc.ClientConnInterface) TwitterServiceReactionClient {
	return &twitterServiceReactionClient{cc}
}

func (c *twitterServiceReactionClient) PostTweet(ctx context.Context, in *Format_NoParam, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TwitterServiceReaction_PostTweet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterServiceReactionClient) PostTweetWithContent(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TwitterServiceReaction_PostTweetWithContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterServiceReactionClient) PostTweetWithPoll(ctx context.Context, in *Format_NoParam, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TwitterServiceReaction_PostTweetWithPoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterServiceReactionClient) PostTweetWithContentWithPoll(ctx context.Context, in *Format_OnlyTitle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TwitterServiceReaction_PostTweetWithContentWithPoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitterServiceReactionServer is the server API for TwitterServiceReaction service.
// All implementations must embed UnimplementedTwitterServiceReactionServer
// for forward compatibility
type TwitterServiceReactionServer interface {
	PostTweet(context.Context, *Format_NoParam) (*Empty, error)
	PostTweetWithContent(context.Context, *Format_OnlyTitle) (*Empty, error)
	PostTweetWithPoll(context.Context, *Format_NoParam) (*Empty, error)
	PostTweetWithContentWithPoll(context.Context, *Format_OnlyTitle) (*Empty, error)
	mustEmbedUnimplementedTwitterServiceReactionServer()
}

// UnimplementedTwitterServiceReactionServer must be embedded to have forward compatible implementations.
type UnimplementedTwitterServiceReactionServer struct {
}

func (UnimplementedTwitterServiceReactionServer) PostTweet(context.Context, *Format_NoParam) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTweet not implemented")
}
func (UnimplementedTwitterServiceReactionServer) PostTweetWithContent(context.Context, *Format_OnlyTitle) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTweetWithContent not implemented")
}
func (UnimplementedTwitterServiceReactionServer) PostTweetWithPoll(context.Context, *Format_NoParam) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTweetWithPoll not implemented")
}
func (UnimplementedTwitterServiceReactionServer) PostTweetWithContentWithPoll(context.Context, *Format_OnlyTitle) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTweetWithContentWithPoll not implemented")
}
func (UnimplementedTwitterServiceReactionServer) mustEmbedUnimplementedTwitterServiceReactionServer() {
}

// UnsafeTwitterServiceReactionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitterServiceReactionServer will
// result in compilation errors.
type UnsafeTwitterServiceReactionServer interface {
	mustEmbedUnimplementedTwitterServiceReactionServer()
}

func RegisterTwitterServiceReactionServer(s grpc.ServiceRegistrar, srv TwitterServiceReactionServer) {
	s.RegisterService(&TwitterServiceReaction_ServiceDesc, srv)
}

func _TwitterServiceReaction_PostTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServiceReactionServer).PostTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitterServiceReaction_PostTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServiceReactionServer).PostTweet(ctx, req.(*Format_NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterServiceReaction_PostTweetWithContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_OnlyTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServiceReactionServer).PostTweetWithContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitterServiceReaction_PostTweetWithContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServiceReactionServer).PostTweetWithContent(ctx, req.(*Format_OnlyTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterServiceReaction_PostTweetWithPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServiceReactionServer).PostTweetWithPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitterServiceReaction_PostTweetWithPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServiceReactionServer).PostTweetWithPoll(ctx, req.(*Format_NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterServiceReaction_PostTweetWithContentWithPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Format_OnlyTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServiceReactionServer).PostTweetWithContentWithPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitterServiceReaction_PostTweetWithContentWithPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServiceReactionServer).PostTweetWithContentWithPoll(ctx, req.(*Format_OnlyTitle))
	}
	return interceptor(ctx, in, info, handler)
}

// TwitterServiceReaction_ServiceDesc is the grpc.ServiceDesc for TwitterServiceReaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwitterServiceReaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TwitterServiceReaction",
	HandlerType: (*TwitterServiceReactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "postTweet",
			Handler:    _TwitterServiceReaction_PostTweet_Handler,
		},
		{
			MethodName: "postTweetWithContent",
			Handler:    _TwitterServiceReaction_PostTweetWithContent_Handler,
		},
		{
			MethodName: "postTweetWithPoll",
			Handler:    _TwitterServiceReaction_PostTweetWithPoll_Handler,
		},
		{
			MethodName: "postTweetWithContentWithPoll",
			Handler:    _TwitterServiceReaction_PostTweetWithContentWithPoll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twitter_reaction_service.proto",
}
